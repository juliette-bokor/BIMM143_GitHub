---
title: "Class06: R Functions"
author: "Juliette Bokor (PID: A16808121)"
format: pdf
---

Functions are how we get work done in R. We call functions to do everything from reading data to doing analysis and outputing plots and results. 

All functions in R have at least three things: 
- **A name**; you get to pick this is you're writing your own function
- **Input arguments**; there can be only one or loads - again your choice
- **The body**; where the work gets done, the code between the curly brackets

## a first silly function

Lets write a function to add some numbers. We can call it `add()`

```{r}
x <- 10
y <- 10
x+y
```



```{r}
add <- function(x) {
  y <- 10
  x+y
}
```

Can I just use my new function? 
```{r}
add(1)
```


Let's make it a bit more flexible. 

```{r}
add <- function(x, y=1) {
  x+y
}

add(10,10)
```


```{r}
add(10)
```


```{r}
add(10,100)
```



## Class06 Hands-on Lab Assignment: grade() function 

Write a function to grade student work. We will start a simple version of the problem and the following example student. vectors. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
mean(student1)
```

```{r}
mean(student2, na.rm=TRUE)
```

```{r}
mean(student3, na.rm=TRUE)
```


Let's work with student 1 and find (and drop) the lowest score. 

```{r}
min(student1)
```

```{r}
which.min(student1)
student1[8]
```

finds the minimum score in the student 1 vector, then finds that term
```{r}
student1[which.min(student1)]
```

Using a minus gives all values EXCEPT that one
```{r}
student1[-8]
```

Our first working snippet that drops the lowest score and calculates the mean
```{r}
mean(student1[-which.min(student1)])
```


```{r}
x <- student1
mean(x[-which.min(x)])
```


Replacing the NA values with 0 to represent the missing homework. 

First task is to find the NA values (i.e. where are they in the vector)

```{r}
x <- student2
x
is.na(x)
```

I have found the NA (TRUE) values from `is.na()` now I want to make them equal to 0 (overwrite them)


Combination of `is.na(x)` with making the elements equal to zero, and then take this "masked" (vector of student score NA values as 0) and drop the lowest and get the mean. 

```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```


Now I can turn my snipet into my first function. 

```{r}
grade <- function(x){
  #making NA equal to 0 to represent the missing assignments
  x[is.na(x)] <- 0
  #dropping the lowest score from the vector and calculating the mean
mean(x[-which.min(x)])
}
```


```{r}
grade(student3)
```


Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]



```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
#making the first column the hw1 score instead of student-1, student-2, etc
head(gradebook)
```

The `apply()` function in R is super useful but can be a little confusing to begin with; let's have a look at how it works. 

This gives the average grade, with the lowest score dropped for each student in the gradebook. 
```{r}
ans <- apply(gradebook, 1, grade)
ans
#the first term is the data set being used, the second term is a 1 which means it is running the function by row instead of column, and the third term is the function being applied
```


Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]
 
```{r}
which.max(ans)
```

The student with the top score is student 18. 



Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]
```{r}
which.min(apply(gradebook, 2, mean, na.rm=TRUE))

```

The homework with the lowest score is homework 2



Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]
```{r}
#the closer the value is to 1, the higher the correlation between the two
cor(gradebook$hw1, ans)
```

Make all NA values into zero. 
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```

Now we can use `apply()` to examine the correlation of every assignment in the masked gradebook to the overall score for each student in the class. 
```{r}
apply(mask, 2, cor, y=ans)
#the fourth term is extra arguments for the function, so in this case the function in cor
```

The homework most correlated to overall score was hw5, the least correlated was hw2. 

Q5. Make sure you save your Quarto document and can click the “Render” (or Rmark- down”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]



```



